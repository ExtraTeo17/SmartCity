package GUI;

import Agents.LightManager;
import Agents.VehicleAgent;
import SmartCity.RoutePainter;
import SmartCity.SmartCityAgent;
import SmartCity.Station;
import SmartCity.ZonePainter;
import Vehicles.WaywardCar;
import com.graphhopper.util.shapes.GHPoint3D;
import jade.wrapper.StaleProxyException;
import org.jxmapviewer.JXMapViewer;
import org.jxmapviewer.OSMTileFactoryInfo;
import org.jxmapviewer.input.*;
import org.jxmapviewer.painter.CompoundPainter;
import org.jxmapviewer.painter.Painter;
import org.jxmapviewer.viewer.*;

import javax.swing.*;
import javax.swing.event.MouseInputListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import java.util.List;
import java.util.Timer;

public class MapWindow {
    public JPanel MainPanel;
    public JXMapViewer MapViewer;
    private JPanel MapPanel;
    private JPanel SidePanel;
    private JButton StartRouteButton;
    private JSpinner radiusSpinner;
    private JSpinner carLimitSpinner;
    private JSpinner seedSpinner;
    private SmartCityAgent SmartCityAgent;

    private Timer refreshTimer = new Timer(true);

    private Timer spawnTimer = new Timer(true);

    private GeoPosition pointA;
    private GeoPosition pointB;

    private SimulationState state = SimulationState.SETTING_ZONE;
    private Random random = new Random();
    private GeoPosition zoneCenter;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    public MapWindow() {
        MapViewer = new JXMapViewer();
        TileFactoryInfo info = new OSMTileFactoryInfo();
        DefaultTileFactory tileFactory = new DefaultTileFactory(info);
        tileFactory.setThreadPoolSize(8);
        MapViewer.setTileFactory(tileFactory);
        GeoPosition warsaw = new GeoPosition(52.24, 21.02);
        MapViewer.setZoom(7);
        MapViewer.setAddressLocation(warsaw);
        radiusSpinner.setModel(new SpinnerNumberModel(1000, 100, 50000, 100));
        carLimitSpinner.setModel(new SpinnerNumberModel(50, 5, 1000, 1));
        seedSpinner.setModel(new SpinnerNumberModel(69, 0, 999999, 1));

        //Left click event
        MapViewer.addMouseListener(new MapClickListener(MapViewer) {
            @Override
            public void mapClicked(GeoPosition geoPosition) {
                System.out.println("Lat: " + geoPosition.getLatitude() + " Lon: " + geoPosition.getLongitude());
                switch (state) {
                    case SETTING_ZONE:
                        zoneCenter = geoPosition;
                        SmartCityAgent.prepareStations(geoPosition, getZoneRadius());
                        SmartCityAgent.prepareLightManagers(geoPosition, getZoneRadius());
                        break;
                    case RUNNING:
                        if (pointA == null) {
                            pointA = geoPosition;
                        } else {
                            pointB = geoPosition;
                            //create car, generate lights, add route to car, add car to agents
                            VehicleAgent vehicle = new VehicleAgent();
                            RouteInfo info = Router.generateRouteInfo(pointA, pointB); /// ?????????? WTF
                            WaywardCar car = new WaywardCar(info.route);
                            vehicle.setVehicle(car);
                            try {
                                SmartCityAgent.AddNewVehicleAgent("WaywardCar" + SmartCityAgent.Vehicles.size(), vehicle);
                                SmartCityAgent.ActivateAgent(vehicle);
                            } catch (StaleProxyException e) {
                                e.printStackTrace();
                            }
                            System.out.println("Vehicles: " + SmartCityAgent.Vehicles.size());
                            System.out.println("Lights: " + SmartCityAgent.lightManagers.size());
                            pointA = null;
                            pointB = null;
                        }
                        break;
                }
            }
        });

        //Pan on right click + drag
        MouseInputListener mia = new PanRightMouseInputListener(MapViewer);
        MapViewer.addMouseListener(mia);
        MapViewer.addMouseMotionListener(mia);

        //Zoom on scroll wheel
        MapViewer.addMouseWheelListener(new ZoomMouseWheelListenerCursor(MapViewer));

        MapPanel.add(MapViewer);
        MapPanel.revalidate();
        StartRouteButton.addActionListener(new ActionListener() {
        	
            @Override
            public void actionPerformed(ActionEvent e) {
                carLimitSpinner.setEnabled(false);
                seedSpinner.setEnabled(false);
                radiusSpinner.setEnabled(false);
                random.setSeed(getSeed());
                startLightManagerAgents();
                spawnTimer.scheduleAtFixedRate(new CreateCarTask(), 0, 100);
            }

			private void startLightManagerAgents() {
				SmartCityAgent.activateLightManagerAgents();
			}
        });
        refreshTimer.scheduleAtFixedRate(new RefreshTask(), 0, 100);
    }
    
    /*@Deprecated
    private void addLightManagersFromRoute(RouteInfo info) {
	    for (Long mgrId : info.lightManagers) {
	        try {
	            SmartCityAgent.AddLightManagerAgent("LightManager" + mgrId, mgr); // to optimize (only name instead of entire agent?)
	        } catch (StaleProxyException e) {
	            e.printStackTrace();
	        }
	    }
    }*/

    public MapWindow(SmartCityAgent agent) {
        this();
        SmartCityAgent = agent;
    }

    private int getZoneRadius() {
        return (int) radiusSpinner.getValue();
    }

    private int getCarLimit() {
        return (int) carLimitSpinner.getValue();
    }

    private int getSeed() {
        return (int) seedSpinner.getValue();
    }

    public void DrawLights(List<Painter<JXMapViewer>> painters) {
    	if (SmartCity.SmartCityAgent.lightManagersUnderConstruction)
    		return;
    	
        for (LightManager mgr : SmartCity.SmartCityAgent.lightManagers) {
             mgr.draw(painters);
        }
    }

    public void DrawVehicles(List painters) {
        Set<Waypoint> set = new HashSet<>();
        for (VehicleAgent a : SmartCityAgent.Vehicles) {
            set.add(new DefaultWaypoint(a.Vehicle.getPosition()));
        }
        WaypointPainter<Waypoint> waypointPainter = new WaypointPainter<>();
        waypointPainter.setWaypoints(set);
        waypointPainter.setRenderer(new CustomWaypointRenderer("cabriolet.png"));
        painters.add(waypointPainter);
    }

    public void DrawRoutes(List painters) {

        for (VehicleAgent a : SmartCityAgent.Vehicles) {
            List<GeoPosition> track = new ArrayList<GeoPosition>();
            for (GHPoint3D point : a.Vehicle.getFullRoute()) {
                track.add(new GeoPosition(point.lat, point.lon));
            }
            Random r = new Random(a.hashCode());
            RoutePainter routePainter = new RoutePainter(track, new Color(r.nextInt(255), r.nextInt(255), r.nextInt(255)));
            painters.add(routePainter);
        }
    }

    public void DrawZones(List painters) {
        if (zoneCenter != null) {
            Set<Waypoint> set = new HashSet<>();
            set.add(new DefaultWaypoint(zoneCenter));
            WaypointPainter<Waypoint> waypointPainter = new WaypointPainter<>();
            waypointPainter.setWaypoints(set);
            waypointPainter.setRenderer(new CustomWaypointRenderer("blue_waypoint.png"));
            painters.add(waypointPainter);

            painters.add(new ZonePainter(zoneCenter, getZoneRadius(), Color.BLUE));
        }
    }

	private void DrawStations(List painters) {
        Set<Waypoint> set = new HashSet<>();
        for (Station station : SmartCityAgent.stations) {
            set.add(new DefaultWaypoint(station.getPosition()));
        }
        WaypointPainter<Waypoint> waypointPainter = new WaypointPainter<>();
        waypointPainter.setWaypoints(set);
        waypointPainter.setRenderer(new CustomWaypointRenderer("bus_stop.png"));
        painters.add(waypointPainter);
	}

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MainPanel = new JPanel();
        MainPanel.setLayout(new BorderLayout(0, 0));
        MainPanel.setMinimumSize(new Dimension(800, 600));
        final JSplitPane splitPane1 = new JSplitPane();
        splitPane1.setDividerLocation(600);
        splitPane1.setDividerSize(10);
        MainPanel.add(splitPane1, BorderLayout.CENTER);
        MapPanel = new JPanel();
        MapPanel.setLayout(new BorderLayout(0, 0));
        MapPanel.setMinimumSize(new Dimension(-1, -1));
        splitPane1.setLeftComponent(MapPanel);
        SidePanel = new JPanel();
        SidePanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        SidePanel.setMaximumSize(new Dimension(400, 32767));
        SidePanel.setMinimumSize(new Dimension(400, 40));
        SidePanel.setPreferredSize(new Dimension(400, 40));
        splitPane1.setRightComponent(SidePanel);
        final JLabel label1 = new JLabel();
        label1.setText("Zone radius (in m)");
        SidePanel.add(label1);
        radiusSpinner = new JSpinner();
        radiusSpinner.setMaximumSize(new Dimension(150, 30));
        radiusSpinner.setMinimumSize(new Dimension(150, 30));
        SidePanel.add(radiusSpinner);
        final JLabel label2 = new JLabel();
        label2.setText("Car limit");
        SidePanel.add(label2);
        carLimitSpinner = new JSpinner();
        carLimitSpinner.setMaximumSize(new Dimension(150, 30));
        carLimitSpinner.setMinimumSize(new Dimension(150, 30));
        SidePanel.add(carLimitSpinner);
        final JLabel label3 = new JLabel();
        label3.setText("Simulation seed");
        SidePanel.add(label3);
        seedSpinner = new JSpinner();
        seedSpinner.setMaximumSize(new Dimension(150, 30));
        seedSpinner.setMinimumSize(new Dimension(150, 30));
        SidePanel.add(seedSpinner);
        StartRouteButton = new JButton();
        StartRouteButton.setText("Start vehicles");
        StartRouteButton.putClientProperty("hideActionText", Boolean.FALSE);
        SidePanel.add(StartRouteButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainPanel;
    }

    public class RefreshTask extends TimerTask { // OCB ?????? TOO OFTEN
        @Override
        public void run() {
            List<Painter<JXMapViewer>> painters = new ArrayList<>();
            DrawRoutes(painters);
            DrawLights(painters);
            DrawVehicles(painters);
            DrawZones(painters);
            DrawStations(painters);
            CompoundPainter<JXMapViewer> painter = new CompoundPainter<>(painters);
            MapViewer.setOverlayPainter(painter);
        }
    }

    public class CreateCarTask extends TimerTask {
        @Override
        public void run() {
            if (SmartCityAgent.Vehicles.size() >= getCarLimit()) return;
            double angle = random.nextDouble() * Math.PI * 2;
            double lat = Math.sin(angle) * getZoneRadius() * 0.0000089;
            double lon = Math.cos(angle) * getZoneRadius() * 0.0000089 * Math.cos(lat);

            GeoPosition A = new GeoPosition(zoneCenter.getLatitude() + lat, zoneCenter.getLongitude() + lon);
            GeoPosition B = new GeoPosition(zoneCenter.getLatitude() - lat, zoneCenter.getLongitude() - lon);
            RouteInfo info;
            try
            {
                info = Router.generateRouteInfo(A, B);
            }
            catch (Exception e)
            {
                return;
            }

            VehicleAgent vehicle = new VehicleAgent();
            WaywardCar car = new WaywardCar(info.route);
            vehicle.setVehicle(car);
            try {
                SmartCityAgent.AddNewVehicleAgent("WaywardCar" + SmartCityAgent.Vehicles.size(), vehicle);
                SmartCityAgent.ActivateAgent(vehicle);
            } catch (StaleProxyException e) {
                e.printStackTrace();
            }
            SmartCityAgent.ActivateAgent(vehicle);
        }
    }

}
