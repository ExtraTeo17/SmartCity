package GUI;

import Agents.LightColor;
import Agents.TrafficLightAgent;
import Agents.VehicleAgent;
import SmartCity.RoutePainter;
import SmartCity.SmartCityAgent;
import Vehicles.WaywardCar;
import com.graphhopper.util.shapes.GHPoint3D;
import jade.wrapper.StaleProxyException;
import org.jxmapviewer.JXMapViewer;
import org.jxmapviewer.OSMTileFactoryInfo;
import org.jxmapviewer.input.*;
import org.jxmapviewer.painter.CompoundPainter;
import org.jxmapviewer.painter.Painter;
import org.jxmapviewer.viewer.*;

import javax.swing.*;
import javax.swing.event.MouseInputListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import java.util.List;
import java.util.Timer;

public class MapWindow {
    public JPanel MainPanel;
    public JXMapViewer MapViewer;
    private JPanel MapPanel;
    private JPanel SidePanel;
    private JButton StartRouteButton;
    private SmartCityAgent SmartCityAgent;

    private Timer timer = new Timer(true);

    private GeoPosition pointA;
    private GeoPosition pointB;

    public MapWindow(SmartCityAgent agent) {
        this();
        SmartCityAgent = agent;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    public MapWindow() {
        MapViewer = new JXMapViewer();
        TileFactoryInfo info = new OSMTileFactoryInfo();
        DefaultTileFactory tileFactory = new DefaultTileFactory(info);
        tileFactory.setThreadPoolSize(8);
        MapViewer.setTileFactory(tileFactory);
        GeoPosition warsaw = new GeoPosition(52.24, 21.02);
        MapViewer.setZoom(7);
        MapViewer.setAddressLocation(warsaw);

        //Left click event
        MapViewer.addMouseListener(new MapClickListener(MapViewer) {
            @Override
            public void mapClicked(GeoPosition geoPosition) {
                System.out.println("Lat: " + geoPosition.getLatitude() + " Lon: " + geoPosition.getLongitude());
                if (pointA == null) {
                    pointA = geoPosition;
                } else {
                    pointB = geoPosition;
                    //create car, generate lights, add route to car, add car to agents
                    VehicleAgent vehicle = new VehicleAgent();
                    RouteInfo info = Router.generateRouteInfo(pointA, pointB);
                    WaywardCar car = new WaywardCar(info.Route);
                    vehicle.setVehicle(car);
                    for (OSMNode node : info.Lights) {
                        TrafficLightAgent light = new TrafficLightAgent(node.getPosition());
                        try {
                            SmartCityAgent.AddLightAgent(node.getId().toString(), light);
                        } catch (StaleProxyException e) {
                            e.printStackTrace();
                        }
                    }
                    try {
                        SmartCityAgent.AddNewVehicleAgent("WaywardCar" + SmartCityAgent.Vehicles.size(), vehicle);
                    } catch (StaleProxyException e) {
                        e.printStackTrace();
                    }
                    System.out.println("Vehicles: " + SmartCityAgent.Vehicles.size());
                    System.out.println("Lights: " + SmartCityAgent.Lights.size());
                    pointA = null;
                    pointB = null;
                }
            }
        });

        //Pan on right click + drag
        MouseInputListener mia = new PanRightMouseInputListener(MapViewer);
        MapViewer.addMouseListener(mia);
        MapViewer.addMouseMotionListener(mia);

        //Zoom on scroll wheel
        MapViewer.addMouseWheelListener(new ZoomMouseWheelListenerCursor(MapViewer));

        MapPanel.add(MapViewer);
        MapPanel.revalidate();
        StartRouteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                for (VehicleAgent a : SmartCityAgent.Vehicles) {
                    SmartCityAgent.ActivateAgent(a);
                }
            }
        });
        timer.scheduleAtFixedRate(new RefreshTask(), 0, 100);
    }

    public void DrawRoutes(List painters) {
        for (VehicleAgent a : SmartCityAgent.Vehicles) {
            List<GeoPosition> track = new ArrayList<GeoPosition>();
            for (GHPoint3D point : a.Vehicle.getFullRoute()) {
                track.add(new GeoPosition(point.lat, point.lon));
            }
            RoutePainter routePainter = new RoutePainter(track);
            painters.add(routePainter);
        }
    }

    public void DrawLights(List painters) {
        for (TrafficLightAgent a : SmartCityAgent.Lights) {
            HashSet set = new HashSet();
            set.add(new DefaultWaypoint(a.getPosition()));
            WaypointPainter<Waypoint> waypointPainter = new WaypointPainter<>();
            waypointPainter.setWaypoints(set);
            switch (a.lightColor) {
                case RED:
                    waypointPainter.setRenderer(new CustomWaypointRenderer("light_red.png"));
                    break;
                case YELLOW:
                    waypointPainter.setRenderer(new CustomWaypointRenderer("light_yellow.png"));
                    break;
                case GREEN:
                    waypointPainter.setRenderer(new CustomWaypointRenderer("light_green.png"));
                    break;
            }
            painters.add(waypointPainter);
        }
    }

    public void DrawVehicles(List painters) {
        Set<Waypoint> set = new HashSet<>();
        for (VehicleAgent a : SmartCityAgent.Vehicles) {
            set.add(new DefaultWaypoint(a.Vehicle.getPosition()));
        }
        WaypointPainter<Waypoint> waypointPainter = new WaypointPainter<>();
        waypointPainter.setWaypoints(set);
        waypointPainter.setRenderer(new CustomWaypointRenderer("blue_waypoint.png"));
        painters.add(waypointPainter);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MainPanel = new JPanel();
        MainPanel.setLayout(new BorderLayout(0, 0));
        MainPanel.setMinimumSize(new Dimension(800, 600));
        final JSplitPane splitPane1 = new JSplitPane();
        splitPane1.setDividerLocation(600);
        splitPane1.setDividerSize(10);
        MainPanel.add(splitPane1, BorderLayout.CENTER);
        MapPanel = new JPanel();
        MapPanel.setLayout(new BorderLayout(0, 0));
        MapPanel.setMinimumSize(new Dimension(-1, -1));
        splitPane1.setLeftComponent(MapPanel);
        SidePanel = new JPanel();
        SidePanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        splitPane1.setRightComponent(SidePanel);
        StartRouteButton = new JButton();
        StartRouteButton.setText("Start vehicles");
        StartRouteButton.putClientProperty("hideActionText", Boolean.FALSE);
        SidePanel.add(StartRouteButton);
    }

    public class RefreshTask extends TimerTask {
        @Override
        public void run() {
            List<Painter<JXMapViewer>> painters = new ArrayList<>();
            DrawRoutes(painters);
            DrawLights(painters);
            DrawVehicles(painters);
            CompoundPainter<JXMapViewer> painter = new CompoundPainter<>(painters);
            MapViewer.setOverlayPainter(painter);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainPanel;
    }

}
